#include "DPR500/commands.hpp"
#include "DPR500/exceptions.hpp"
#include "stringify.hpp"
#include "DPR500/basic_pulser_receiver.hpp"






boost::shared_ptr<ICR::pulser::command::initiate_address_assignment> 
ICR::pulser::command::InitiationFactory::initiate_address_assignment() const
{
  return boost::shared_ptr<ICR::pulser::command::initiate_address_assignment> ( new ICR::pulser::command::initiate_address_assignment() );
}


boost::shared_ptr<ICR::pulser::command::end_address_assignment> 
ICR::pulser::command::InitiationFactory::end_address_assignment(const char& address) const
{
  return boost::shared_ptr<ICR::pulser::command::end_address_assignment> ( new ICR::pulser::command::end_address_assignment(address) );
}

boost::shared_ptr<ICR::pulser::command::set_address> 
ICR::pulser::command::InitiationFactory::set_address(const char& address) const
{
  return boost::shared_ptr<ICR::pulser::command::set_address> ( new ICR::pulser::command::set_address(address) );
}


boost::shared_ptr<ICR::pulser::command::instrument_address> 
ICR::pulser::command::InitiationFactory::instrument_address() const
{
  return boost::shared_ptr<ICR::pulser::command::instrument_address> ( new ICR::pulser::command::instrument_address() );
}

boost::shared_ptr<ICR::pulser::command::instrument_type> 
ICR::pulser::command::InitiationFactory::instrument_type() const
{
  return boost::shared_ptr<ICR::pulser::command::instrument_type> ( new ICR::pulser::command::instrument_type() );
}


boost::shared_ptr<ICR::pulser::command::instrument_serial_number> 
ICR::pulser::command::InitiationFactory::instrument_serial_number() const
{
  return boost::shared_ptr<ICR::pulser::command::instrument_serial_number> ( new ICR::pulser::command::instrument_serial_number() );
}

boost::shared_ptr<ICR::pulser::command::instrument_firmware> 
ICR::pulser::command::InitiationFactory::instrument_firmware() const
{
  return boost::shared_ptr<ICR::pulser::command::instrument_firmware> ( new ICR::pulser::command::instrument_firmware() );
}

boost::shared_ptr<ICR::pulser::command::DPR500_serial_number> 
ICR::pulser::command::InitiationFactory::DPR500_serial_number() const
{
  return boost::shared_ptr<ICR::pulser::command::DPR500_serial_number> ( new ICR::pulser::command::DPR500_serial_number() );
}

ICR::pulser::command::blink::blink(const char& address, const short& speed)
  : m_cmd()
{
  short sp = speed;
  if (speed<50) sp = 50;
  if (speed>200) sp = 200;
  m_cmd.push_back(address);
  m_cmd.push_back(0x00);
  m_cmd.push_back(0x62); //b
  m_cmd.push_back( (char) sp);
  m_cmd.push_back(0x00);
}



ICR::pulser::command::initiate_address_assignment::initiate_address_assignment()
{
  m_cmd.push_back(0x00);
  m_cmd.push_back(0x00);
  m_cmd.push_back(0x44);
  m_cmd.push_back(0x00);
  m_cmd.push_back(0x00);
}

ICR::pulser::command::end_address_assignment::end_address_assignment(const char& address)
{
  set_cmd(address);
}

void
ICR::pulser::command::end_address_assignment::set_cmd(const  char& address)
{
  m_cmd.push_back(0x00);
  m_cmd.push_back(0x00);
  m_cmd.push_back(0x45);
  m_cmd.push_back(address);
  m_cmd.push_back(0x00);
}


ICR::pulser::command::set_address::set_address(const  char& address)
{
  m_cmd.push_back(0x00);
  m_cmd.push_back(0x00);
  m_cmd.push_back(0x41);
  m_cmd.push_back(address);
  m_cmd.push_back(0x00);
}

ICR::pulser::command::instrument_address::instrument_address()
{
  m_cmd.push_back(0x00);
  m_cmd.push_back(0x00);
  m_cmd.push_back(0x49);
  m_cmd.push_back(0x02);
  m_cmd.push_back(0x00);
}

std::string
ICR::pulser::command::instrument_address::decode(const std::string& ans)
{
  return ans.substr(0,1); //the address char
}


ICR::pulser::command::instrument_type::instrument_type()
{ 
  m_cmd.push_back(0x00);
  m_cmd.push_back(0x00);
  m_cmd.push_back(0x49);
  m_cmd.push_back(0x00);
  m_cmd.push_back(0x00);
}

std::string
ICR::pulser::command::instrument_type::decode(const std::string& ans)
{
  return ans.substr(3,7);
}


ICR::pulser::command::instrument_serial_number::instrument_serial_number()
{
  m_cmd.push_back(0x00);
  m_cmd.push_back(0x00);
  m_cmd.push_back(0x49);
  m_cmd.push_back(0x01);
  m_cmd.push_back(0x00);
}


std::string
ICR::pulser::command::instrument_serial_number::decode(const std::string& ans)
{
  return ans.substr(3,7);
}


ICR::pulser::command::instrument_firmware::instrument_firmware()
{
 m_cmd.push_back(0x00);
  m_cmd.push_back(0x00);
  m_cmd.push_back(0x49);
  m_cmd.push_back(0x02);
  m_cmd.push_back(0x00);
}


std::string
ICR::pulser::command::instrument_firmware::decode(const std::string& ans)
{
  return ans.substr(3,4);
}



ICR::pulser::command::DPR500_serial_number::DPR500_serial_number()
{
  m_cmd.push_back(0x00);
  m_cmd.push_back(0x00);
  m_cmd.push_back(0x49);
  m_cmd.push_back(0x03);
  m_cmd.push_back(0x00);
}


std::string
ICR::pulser::command::DPR500_serial_number::decode(const std::string& ans)
{
  return ans.substr(3,7);
}



// ICR::pulser::command::
// {

// }


// std::string
// ICR::pulser::command::::decode(const std::string& ans)
// {

// }


// ICR::pulser::command::
// {

// }


// std::string
// ICR::pulser::command::::decode(const std::string& ans)
// {

// }



// // ICR::pulser::command::D_command::D_command()
// // {
// //   m_cmd.push_back(0x00);
// //   m_cmd.push_back(0x00);
// //   m_cmd.push_back(0x44);
// //   m_cmd.push_back(0x00);
// //   m_cmd.push_back(0x00);
// //   std::cout<<"D COMMAND"<<std::endl;

// //   for(size_t i=0;i<m_cmd.size();++i){
// //     std::cout<<"["<<i<<"] = "<<(int) m_cmd[i]<<std::endl;
// //   }
// // }



// ICR::pulser::command::I_command::I_command(const  char& i)
// {
//   m_cmd.push_back(0x00);
//   m_cmd.push_back(0x00);
//   m_cmd.push_back(0x49);
//   m_cmd.push_back(i);
//   m_cmd.push_back(0x00);
//   std::cout<<"I COMMAND"<<std::endl;

//   for(size_t i=0;i<m_cmd.size();++i){
//     std::cout<<"["<<i<<"] = "<<(int) m_cmd[i]<<std::endl;
//   }


// }

// ICR::pulser::command::A_command::A_command(const  char& address)
// {
//   m_cmd.push_back(0x00);
//   m_cmd.push_back(0x00);
//   m_cmd.push_back(0x41);
//   m_cmd.push_back( address);
//   m_cmd.push_back(0x00);
// }

// ICR::pulser::command::E_command::E_command(const  char& address)

// {
//   m_cmd.push_back(0x00);
//   m_cmd.push_back(0x00);
//   m_cmd.push_back(0x45);
//   m_cmd.push_back( address);
//   m_cmd.push_back(0x00);
// }


// ICR::pulser::command::Function_command::Function_command(const char& address, const char& command, const char& value, const char& channel)
// {
//   m_cmd.push_back( address);//bit 1
//   // if (command == "B") m_cmd.push_back(0x00);
//   // else if (command == "P" || command == "V") m_cmd.push_back(0x02);
//   // else m_cmd.push_back(0x01);
  

//   switch ((long) command) {//byte 2 //length
//   case ((long) 'B'): m_cmd.push_back(0x00); break;
//   case ((int) 'P'): m_cmd.push_back(0x02); break;
//   case ((int) 'V'): m_cmd.push_back(0x02); break;
//    default: m_cmd.push_back(0x01); break;
//   }
	  
//   m_cmd.push_back(command);//bit 3
//   m_cmd.push_back(value);//bit 4
//   m_cmd.push_back(channel); //bit 5
//   m_cmd.push_back(0x00);  //bit 6
	  
// }


// ICR::pulser::command::Query_command::Query_command(const char& address, const char& command,  const  char& channel)
// {
//   m_cmd.push_back(address);//bit 1
//   m_cmd.push_back(0x00); //bit 2
	  
//   m_cmd.push_back(command);//bit 3
//   m_cmd.push_back(channel); //bit 4
//   m_cmd.push_back(0x00);  //bit 5
	  
// }
// ICR::pulser::command::QueryI_command::QueryI_command(const char& address, const char& command, const char& value, const char& channel, const char& channel_option)
// {
//   m_cmd.push_back( address);//bit 1
//   m_cmd.push_back(0x00); //bit 2
	  
//   m_cmd.push_back(command);//bit 3
//   m_cmd.push_back(value); //bit 4
//   m_cmd.push_back(channel); //bit 5
//   m_cmd.push_back(channel_option); //bit 6
//   m_cmd.push_back(0x00);  //bit 7
	  
// }

ICR::pulser::command::PulserReceiver_cmd::PulserReceiver_cmd()
  : recv_cmd()
{}
void
ICR::pulser::command::PulserReceiver_cmd::update()
{
  m_channel_char = m_pr->get_channel_char();
  m_address = m_pr->get_address_char();
  set_cmd();
}


ICR::pulser::command::gain::gain(
				 const short& measured, 
				 const short& min, 
				 const short& max, 
				 const short step
				 )
  : 
    m_measured(measured), m_min(min), m_max(max), m_step(step),
    m_gain_char(max)
{
  if (max<min) throw exceptions::incorrect_input_to_gain_command();
}

void 
ICR::pulser::command::gain::set_cmd()
{
  // if ( !attached_to_receiver ) throw gain_command_not_attached_to_reveiver();
  // if ( !attached_to_DPR500 ) throw gain_command_not_attached_to_DPR500();
  PulserReceiver_cmd::m_cmd.push_back(m_address);
  PulserReceiver_cmd::m_cmd.push_back(0x67); //g
  PulserReceiver_cmd::m_cmd.push_back(m_gain_char);
  PulserReceiver_cmd::m_cmd.push_back(m_channel_char);
  PulserReceiver_cmd::m_cmd.push_back(0x00);
}


void
ICR::pulser::command::gain::set(const short& g)
{
  const short actual_gain = g-m_measured;
  if (actual_gain<m_min || actual_gain>m_max) 
    throw exceptions::requested_gain_out_of_bounds();
  m_gain_char = (char) (actual_gain +m_min);
  set_cmd();
};


std::string
ICR::pulser::command::gain::decode(const std::string& ans)
{
  std::string useful_bit = ans.substr(4,1);
  return stringify(atoi(useful_bit.c_str()));
}

// template<class filter_option>
// ICR::pulser::command::high_pass_filter::high_pass_filter()
//   : 
//     m_filter_char(0x00),
//     m_channel_char(0x41),
//     m_cmd(),
//     m_option(),
// {}

// template<class filter_option>
// void 
// ICR::pulser::command::high_pass_filter::set(enum filter_option::type& option)
// {
//   m_filter_char = char(int(option));
// }

// template<class filter_option>
// void 
// ICR::pulser::command::high_pass_filter::set_cmd()
// {
//   m_cmd.push_back(m_address);
//   m_cmd.push_back(0x01); 
//   m_cmd.push_back(0x68); //h
//   m_cmd.push_back(m_filter_char);
//   m_cmd.push_back(m_channel_char);
//   m_cmd.push_back(0x00);
// }

// template<class filter_option>
// void
// ICR::pulser::command::high_pass_filter::set_pulser_receiver(boost::shared_ptr<pulser_receiver> p)
// {
//   m_pr = p;
// }

// template<class filter_option>
// void 
// ICR::pulser::command::high_pass_filter::update()
// {
//   m_channel_char = m_pr->get_channel_char();
// }

// template<class filter_option>
// std::string
// ICR::pulser::command::high_pass_filter::decode(const std::string& ans)
// {
//   return stringify(atoi(ans[4]));
// }


// template<class filter_option>
// ICR::pulser::command::low_pass_filter::low_pass_filter()
//   : 
//     m_filter_char(0x00),
//     m_channel_char(0x41),
//     m_cmd(),
//     m_option(),
// {}

// template<class filter_option>
// void 
// ICR::pulser::command::low_pass_filter::set(enum filter_option::type& option)
// {
//   m_filter_char = char(int(option));
// }

// template<class filter_option>
// void 
// ICR::pulser::command::low_pass_filter::set_cmd()
// {
//   m_cmd.push_back(m_address);
//   m_cmd.push_back(0x01); 
//   m_cmd.push_back(0x68); //h
//   m_cmd.push_back(m_filter_char);
//   m_cmd.push_back(m_channel_char);
//   m_cmd.push_back(0x00);
// }

// template<class filter_option>
// void
// ICR::pulser::command::low_pass_filter::set_pulser_receiver(boost::shared_ptr<pulser_receiver> p)
// {
//   m_pr = p;
// }

// template<class filter_option>
// void 
// ICR::pulser::command::low_pass_filter::update()
// {
//   m_channel_char = m_pr->get_channel_char();
// }

// template<class filter_option>
// std::string
// ICR::pulser::command::low_pass_filter::decode(const std::string& ans)
// {
//   return stringify(atoi(ans[4]));
// }

// ICR::pulser::command::master::master(const bool& is_master)
//   : m_master(is_master),
//     m_channel_char(0x41),
//     m_cmd()
// {}
// ICR::pulser::command::master::set(const bool& is_master)
// {
//   if (is_master) m_master=true;
//   else m_master=false;
// }



// void 
// ICR::pulser::command::master::set_cmd()
// {
//   m_cmd.push_back(m_address);
//   m_cmd.push_back(0x01); 
//   m_cmd.push_back(0x6D); //m
//   if (m_master()) 
//     m_cmd.push_back(0);
//   else
//     m_cmd.push_back(1);
//   m_cmd.push_back(m_channel_char);
//   m_cmd.push_back(0x00);
// }




 
// ICR::pulser::commmand::turn_on::turn_on()
//   : m_channel_char(0x41),
//     m_cmd(),
//     m_ptr()
// {

//   m_cmd.push_back(m_address);
//   m_cmd.push_back(0x01); 
//   m_cmd.push_back(0x6F); //o
//   m_cmd.push_back(1); //on
//   m_cmd.push_back(m_channel_char);
//   m_cmd.push_back(0x00);
// }



 
// ICR::pulser::commmand::turn_on::turn_off()
//   : m_channel_char(0x41),
//     m_cmd(),
//     m_ptr()
// {
//   m_cmd.push_back(m_address);
//   m_cmd.push_back(0x01); 
//   m_cmd.push_back(0x6F); //o
//   m_cmd.push_back(0); //off
//   m_cmd.push_back(m_channel_char);
//   m_cmd.push_back(0x00);
// }




// void 
// ICR::pulser::command::prf::prf()
//   : m_prf(),
//     m_channel_char(0x41),
//     m_cmd(),
//     m_pr()
// {}

// void 
// ICR::pulser::command::prf::set(const double& frequency)
// {
//   double value = 12000000.0/frequency;
//   //round value to nearest integer
//   short s = (short) (value+0.5);
//   m_prf[0] = s;
//   m_prf[1] = s>>8;
//   set_cmd();
// }
// std::string 
// ICR::pulser::command::prf::decode(const std::string& ans)
// {
//   return stringify(atoi(ans.substr(4,2).c_str()));
// }



// void 
// ICR::pulser::command::prf::set_cmd()
// {
//   m_cmd.push_back(m_address);
//   m_cmd.push_back(0x02); 
//   m_cmd.push_back(0x70); //p
//   m_cmd.push_back(m_prf[0]);
//   m_cmd.push_back(m_prf[1]);
//   m_cmd.push_back(m_channel_char());
//   m_cmd.push_back(0x00);
// }


// void 
// ICR::pulser::command::external_trigger::external_trigger()
// {
//   m_cmd.push_back(m_address);
//   m_cmd.push_back(0x01); 
//   m_cmd.push_back(0x74); //t
//   m_cmd.push_back(1);
//   m_cmd.push_back(m_channel_char);
//   m_cmd.push_back(0x00);
// }



// void 
// ICR::pulser::command::internal_trigger::internal_trigger()
// {
//   m_cmd.push_back(m_address);
//   m_cmd.push_back(0x01); 
//   m_cmd.push_back(0x74); //t
//   m_cmd.push_back(0);
//   m_cmd.push_back(m_channel_char);
//   m_cmd.push_back(0x00);
// }




// ICR::pulser::command::voltage::voltage(const double& min, const double& max)
//   : m_voltage(),
//     m_min(min), m_max(max),
//     m_channel_char(0x41),
//     m_cmd(),
//     m_pr()
// {
// }
// void
// ICR::pulser::command::voltage::set_cmd(){
//   m_cmd.push_back(m_address);
//   m_cmd.push_back(0x02); 
//   m_cmd.push_back(0x76); //p
//   m_cmd.push_back(v_voltage[0]);
//   m_cmd.push_back(v_voltage[1]);
//   m_cmd.push_back(m_channel_char);
//   m_cmd.push_back(0x00);
  
// }
// void
// ICR::pulser::command::voltage::set(const double& voltage)
// {
//   //round value to nearest integer
//   if (voltage<m_min || voltage>m_max)  throw exception::voltage_out_of_range();
//   short s = (short) (value+0.5);
//   m_prf[0] = s;
//   m_prf[1] = s>>8;
//   set_cmd();

// }

// // void
// // ICR::pulser::command::low_energy::set_cmd()
// // {
  

// // 	m_cmd.push_back(m_address);
// // 	m_cmd.push_back(0x01);
// // 	m_cmd.push_back(0x66); //f
// // 	m_cmd.push_back(0);
// // 	m_cmd.push_back(s>>8);
// // 	m_cmd.push_back(m_channel_char);
// // 	m_cmd.push_back(0x00);

// // }
// // void
// // ICR::pulser::command::high_energy::set_cmd()
// // {
  

// // 	m_cmd.push_back(m_address);
// // 	m_cmd.push_back(0x01);
// // 	m_cmd.push_back(0x66); //f
// // 	m_cmd.push_back(1);
// // 	m_cmd.push_back(s>>8);
// // 	m_cmd.push_back(m_channel_char);
// // 	m_cmd.push_back(0x00);

// // }


// // void
// // ICR::pulser::command::echo_mode::set_cmd()
// // {
  

// // 	m_cmd.push_back(m_address);
// // 	m_cmd.push_back(0x01);
// // 	m_cmd.push_back(0x66); //f
// // 	m_cmd.push_back(1);
// // 	m_cmd.push_back(s>>8);
// // 	m_cmd.push_back(m_channel_char);
// // 	m_cmd.push_back(0x00);

// // }


// // void
// // ICR::pulser::command::pulser::set_cmd()
// // {
  

// // 	m_cmd.push_back(m_address);
// // 	m_cmd.push_back(0x01);
// // 	m_cmd.push_back(0x66); //f
// // 	m_cmd.push_back(1);
// // 	m_cmd.push_back(s>>8);
// // 	m_cmd.push_back(m_channel_char);
// // 	m_cmd.push_back(0x00);

// // }
