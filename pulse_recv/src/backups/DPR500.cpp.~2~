

ICR::pulser::DPR500_com::DPR500_com(const std::string& port)
  : ICR::coms::serial_manager(port, ...),
    m_instrument()
{
  commands::D_command D;
  commands::I_command I(0x00);
  ICR::coms::serial_manager::send(D); 
  std::string ans = ICR::coms::serial_manager::send(I); 
  m_address = ans[0];
  commands::E_command(m_address); 
  ICR::coms::serial_manager::send(E);
  
}

ICR::pulser::DPR500_com::~DPR500_com() {};

void ICR::pulser::DPR500_com::send(const std::string& cmd)
{
  char command = cmd[0];
  char channel = cmd[1];
  char rest = (char) atoi(cmd.substr(3,cmd.size()-3));
  commands::Function_command F(m_address, command, rest, channel);
  ICR::coms::serial_manager::send(F);
}

std::string
void ICR::pulser::DPR500_com::recv(const std::string& cmd)
{
  char command;
  switch ((int) cmd[0])   {
  case ((int) "B"): command = 0xE2; break;
  case ((int) "F"): command = 0xE6; break;
  case ((int) "G"): command = 0xE7; break;
  case ((int) "H"): command = 0xE8; break;
  case ((int) "I"): command = 0xE9; break;
  case ((int) "L"): command = 0xEC; break;
  case ((int) "M"): command = 0xED; break;
  case ((int) "O"): command = 0xEF; break;
  case ((int) "P"): command = 0xF0; break;
  case ((int) "T"): command = 0xF4; break;
  case ((int) "V"): command = 0xF6; break;
  case default: throw invalid_query(); break
  }
  char channel = cmd[1];
  if (cmd[0] != "I"){ 
    
    commands::Query_command F(m_address, command,  channel);
    std::string answer =  ICR::coms::serial_manager::recv(F);
    if (cmd[0] == "B") return stringify(atoi(answer.substr(4,1)));
    else return stringify(atoi(answer.substr(4,answer.size()-3)));
    
  }
  else {
    char channel = cmd[1];
    char channel_option = cmd[2];
    //cmd[3] = :
    
    char rest = (char) (atoi(cmd.substr(4,cmd.size()-4)));
    commands::QueryI_command F(m_address, command, rest, channel, channel_option);
    std::string answer =  ICR::coms::serial_manager::recv(F);
    return stringify(atoi(answer.substr(4,answer.size()-4)));
  }
  
}



void ICR::pulser::DPR500::DPR500(const std::string& port)
  : DPR500_com(port)
{};


void 
ICR::pulser::DPR500::blink(const short& speed)
{
  short sp = speed;
  if (speed<50) sp = 50;
  if (speed>200) sp = 200;
  send("BL:"+stringify(sp));

}
