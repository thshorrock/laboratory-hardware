#include "coms_manager/serial_manager.hpp"

#include <boost/bind.hpp>
#include <boost/lambda/bind.hpp>
#include <boost/array.hpp>
#include <boost/date_time/posix_time/posix_time.hpp>

ICR::coms::serial_manager::serial_manager(const std::string& name,
					  const unsigned int& baud_rate,
					  const enum flow_control::type& flow_control,
					  const enum parity::type&       parity,
					  const enum stop_bits::type&    stop_bits,
					  const unsigned int& char_size
					  ) 
  : coms_manager(),
    m_io_service(),
    m_SerialPort(m_io_service,name)
    
{
  
  m_SerialPort.set_option(boost::asio::serial_port::baud_rate(baud_rate));
  m_SerialPort.set_option(boost::asio::serial_port::flow_control(flow_control));
  m_SerialPort.set_option(boost::asio::serial_port::parity(parity));
  m_SerialPort.set_option(boost::asio::serial_port::stop_bits(stop_bits));
  m_SerialPort.set_option(boost::asio::serial_port::character_size(char_size));
}

ICR::coms::serial_manager::~serial_manager()
{ 
}

void
ICR::coms::serial_manager::send(const std::string& cmd)
{
  if (!m_error) 
    boost::asio::write(m_SerialPort, boost::asio::buffer(cmd)); 
}



std::string
ICR::coms::serial_manager::recv(const std::string& cmd, const unsigned int& buffsize) 
{
  //send quiery and await repsonse
  send(cmd);
  char * buf = (char*) malloc(buffsize);
  std::string ret;
 
  size_t len =m_SerialPort.read_some(boost::asio::buffer(buf, buffsize), m_error);
  for(size_t i=0;i<len;++i){
    ret.push_back(buf[i]);
  }

  if (m_error == boost::asio::error::eof)
    {
      //this is okay
    }
  else  if (m_error)
    throw boost::system::system_error(m_error); // Some other error.

  free(buf);
  return ret;
}

std::string
ICR::coms::serial_manager::timed_recv(const std::string& cmd, const unsigned int& buffsize, const double& seconds ) 
{
  //send quiery and await repsonse
  send(cmd);
  char * buf = (char*) malloc(buffsize);
  boost::asio::deadline_timer timer(m_SerialPort.io_service());
  boost::optional<boost::system::error_code> timer_result; 
  timer.expires_from_now(boost::posix_time::seconds(seconds));
  timer.async_wait(boost::bind(set_result, &timer_result, _1)); 
  
  boost::optional<boost::system::error_code> read_result; 

  m_SerialPort.async_read_some(boost::asio::buffer(buf, buffsize),    boost::bind(set_result, &read_result, _1) );
 
  m_SerialPort.io_service().reset(); 
  while (m_SerialPort.io_service().run_one()) 
    { 
      if (read_result) {
        timer.cancel(); 

      }
      else if (timer_result) 
	{
	  m_SerialPort.cancel(); 
	}
    }
  if (*read_result) 
    {

	  free(buf);
	  std::cout<<"recieve timed out"<<std::endl;

	  throw boost::system::system_error(*read_result); 
    }
  std::string ret;
  for(size_t i=0;i<buffsize;++i){
    ret.push_back(buf[i]);
    if ((int) buf[i] == 10) break; //newline 
  }

  //ret.append(buf);
  free(buf);
  return ret;
}
