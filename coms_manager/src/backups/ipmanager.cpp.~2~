#include "agilent/ipmanager.hpp"

ICR::IPmanager::IPmanager(const std::string& address, const std::string& port)
  : m_io_service(),
    m_socket(m_io_service),
    m_error(boost::asio::error::host_not_found)
{
  boost::asio::ip::tcp::resolver resolver(m_io_service);
  boost::asio::ip::tcp::resolver::query query(address, port);
  boost::asio::ip::tcp::resolver::iterator iter = resolver.resolve(query);
  boost::asio::ip::tcp::resolver::iterator end; // End marker.
  while (m_error && iter != end)
    {
      m_socket.close();
      m_socket.connect(*iter++, m_error);
      boost::asio::ip::tcp::endpoint endpoint = *iter;
    }
  if (m_error)
    throw boost::system::system_error(m_error);
}


    
ICR::IPmanager::~IPmanager(){m_socket.close();}

void
ICR::IPmanager::send(const std::string& cmd)
{
  if (!m_error) 
    boost::asio::write(m_socket, boost::asio::buffer(cmd)); 
}

std::string
ICR::IPmanager::recv(const std::string& cmd, const unsigned int& buffsize) 
{
  //send quiery and await repsonse
  send(cmd);
  char * buf = (char*) malloc(buffsize);
  size_t len = m_socket.read_some(boost::asio::buffer(buf, buffsize), m_error);
  //When the server closes the connection, the ip::tcp::socket::read_some() function will exit with the boost::asio::error::eof m_error, which is how we know to exit the loop.

   if (m_error == boost::asio::error::eof)
     {
       //this is okay
     }
   else  if (m_error)
     throw boost::system::system_error(m_error); // Some other error.

  std::string ret(buf);
  free(buf);
  return ret;
}

std::string
ICR::IPmanager::timed_recv(const std::string& cmd, const unsigned int& buffsize, const double& seconds ) 
{
  //send quiery and await repsonse
  send(cmd);
  char * buf = (char*) malloc(buffsize);
  boost::asio::deadline_timer timer(m_socket.io_service());
  boost::optional<boost::system::error_code> timer_result; 
  timer.expires_from_now(boost::posix_time::seconds(seconds));
  timer.async_wait(boost::bind(set_result, &timer_result, _1)); 
  
  boost::optional<boost::system::error_code> read_result; 

  m_socket.async_read_some(boost::asio::buffer(buf, buffsize),    boost::bind(set_result, &read_result, _1) );
 
  m_socket.io_service().reset(); 
  while (m_socket.io_service().run_one()) 
    { 
      if (read_result) {
        timer.cancel(); 

      }
      else if (timer_result) 
	{
	  m_socket.cancel(); 
	}
    }
  if (*read_result) 
    {

	  free(buf);
	  std::cout<<"recieve timed out"<<std::endl;

	  throw boost::system::system_error(*read_result); 
    }
  std::string ret(buf);
  free(buf);
  return ret;
}
