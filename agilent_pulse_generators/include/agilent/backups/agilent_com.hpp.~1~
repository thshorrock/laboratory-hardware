#include <string>
#include <iostream>
#include "coms_manager/ipmanager.hpp"
//#include "agilent/vxi11_user.h"
#define BUF_LEN 100000

namespace ICR {
  namespace agilent{
    
    namespace shape{
      enum {SIN, SQUARE, PULSE, TRIANGLE, RAMP, NOISE, DC, USER};
    }
    namespace load{
      enum {OHM50, INFTY}; 
    }
    namespace trigger{
      enum {IMMEDIATE, EXTERNAL, BUS}; 
    }
    
    namespace exception{
      struct option_not_recognised{};
      struct failed_to_reset{};
    } 
    
    class agilent_com : public coms::IPmanager {
    public:
      agilent_com(const std::string& IPaddress);
      virtual ~WG33220A() ;

      using coms::IPmanager::send;
      using coms::IPmanager::recv;
      
      std::string error();
      void apply(const int shape, const double freq,const  double volts,const  double offset);
      
      void load(const int);
      void duty_cycle(const double); // square wave only

      void frequency(const double frequency);
      void voltage(const double V);
      void offset(const double offset);

      //burst commands
      void cycles(const unsigned int cycles);
      void burst_on(void);
      void burst_off(void);
      void phase(const double degrees);
      void burst_int(const  double  rate);
      void burst_ext();

      void trigger(const int source);
      void trigger_now() {send("*TRG");};

      void shape (const int);
      void arb_wave(const std::string name, const float*, const unsigned long size);
      //void arb_wave(vector<double> data);

      void reset();

    };

  }
}
