
/** @file lecroy_com_manager.hpp Contains the VICP control for communicating to the lecroy scope. */

#pragma once

#include <string>
#include <iostream>
#include "coms_manager/ipmanager.hpp"


namespace ICR{

  namespace lecroy {

    /** A class handling the VICP header to the Lecroy scope */
    class lecroy_header
    {
    private:
      boost::array<unsigned char, 8> m_header;
      //operation bits
      bool m_data, m_remote, m_lockout, m_clear, m_srq, m_serial_poll, m_eoi;
      
      //version
      unsigned char m_version;
      
      //sequence number
      unsigned char  m_sequence_number;    // only set in version 1A and later

      void set_operation();
      void set_length(const std::string& cmd);
      void set_sequence(void);
      void set_version(void);
    public:
      lecroy_header(const bool& eol=true,const bool& lock = false );
      virtual ~lecroy_header(){};
      std::string add(const std::string& cmd);
      void set_clear(const bool& b) {m_clear = b; }
      void set_lockout(const bool& b) {m_lockout = b; }
      void set_eoi(const bool& b) {m_eoi = b; ;}
      void set_remote(const bool& b) {m_remote = b;}
      void set_data(const bool& b) {m_data = b; }
    };

    /** Lecroy VICP communications manager */
    class lecroy_com_manager : coms::IPmanager
    {
      lecroy_header header;
    public:
      /** Open a communication with the lecroy scope.
       * @param IPaddress The IP address of the lecroy scope.
       */
      lecroy_com_manager(const std::string& IPaddress);
      /** The distructor.*/
      virtual ~lecroy_com_manager();
      /** Send a command to the scope.  Most of the time this will be null terminated @param cmd The command string.*/
      void send(const std::string& cmd);
      
      /** Send a request to the scope.  Most of the time this will be null terminated 
       * @param cmd The request string 
       * @param buffsize The size of the buffer to collect.  The returned string can be shorter than this size.
       * @return The returned string from the scope (missing the header). */
      std::string recv(const std::string& cmd, const unsigned int& buffsize = 128) ;
      std::string timed_recv(const std::string& cmd, const unsigned int& buffsize = 128, const double& seconds = 5) ;
      void clear();

    };


  }

}
