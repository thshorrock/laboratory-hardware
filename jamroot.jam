
#using boost/tools/build/v2/tools/testing ;

import feature : feature ;
import toolset : flags ;

#Name this location $(TOP),
path-constant TOP : . ;


#import swig ;
#exe codegen : codegen.cpp class.verbatim usage.verbatim 
#    t1.verbatim ;







## from http://lists.boost.org/boost-build/2006/12/15869.php
## and http://code.google.com/p/rdkit/wiki/SwigAndBoostBuild

#feature parallelism : mpi mp none : composite link-incompatible ;
#feature.compose <parallelism>none :  ; 
#feature.compose <parallelism>mpi : <define>BOOST_THREAD_WORKING <define>USING_MPI <cxxflags>-Wno-long-long <cxxflags>-fopenmp  <linkflags>-fopenmp <cxxflags>-msse2 <cxxflags>-mmmx <cxxflags>-mfpmath=sse ;
#feature.compose <parallelism>mp :  <cxxflags>-fopenmp <linkflags>-fopenmp <define>BOOST_THREAD_WORKING <cxxflags>-Wno-long-long <cxxflags>-msse2 <cxxflags>-mmmx <cxxflags>-mfpmath=sse ;


##Use the boost-libraries as they came...
path-constant BOOST_BASE : ./boost/ ; 
path-constant BOOST_ROOT : ./boost/ ;


#some variants
#variant releaseAMD64   : release :                 <define>EXTRA_FAST  <instruction-set>athlon64 <address-model>64 <cxxflags>-O3 ;
#variant releaseAMD64mp : release : <parallelism>mp <define>EXTRA_FAST  <instruction-set>athlon64 <address-model>64 ;
#variant releaseAMD64mpi : release : <parallelism>mpi <define>EXTRA_FAST  <instruction-set>athlon64 <address-model>64  ;
#variant release32 : release :  <define>EXTRA_FAST   ;

#variant debugAMD64 : debug :  <define>GLIBCXX_FORCE_NEW <instruction-set>athlon64 <address-model>64   ;
#variant debugAMD64mp : debug :  <define>GLIBCXX_FORCE_NEW <instruction-set>athlon64 <address-model>64 <parallelism>mp  ;
#variant debugAMD64mpi : debug :  <define>GLIBCXX_FORCE_NEW <instruction-set>athlon64 <address-model>64 <parallelism>mpi  ;

#variant profileAMD64 : release :                 <define>EXTRA_FAST  <instruction-set>athlon64 <address-model>64 <cxxflags>-g ;

#asio requires boost system
#alias asio-library-inst     
#      : $(BOOST_BASE)/libs/system/build//boost_system
#      : <include>$(BOOST_BASE)  <search>$(TOP)/lib ;


#alias date_time-library-inst    
#      : $(BOOST_BASE)/libs/date_time/build
#      : <include>$(BOOST_BASE) <search>$(TOP)/lib ;

#install asio-lib-inst  : asio-library : <location>$(TOP)/lib  ;
#install date_time-lib-inst  : date_time-library : <location>$(TOP)/lib  ;


alias threaded-library     
      : $(BOOST_BASE)/libs/thread/build//boost_thread
      : <include>$(BOOST_BASE) <toolset>msvc:<link>static
      ;

alias serialization-library     
      : $(BOOST_BASE)/libs/serialization/build//boost_serialization
      : <include>$(BOOST_BASE) <toolset>msvc:<link>static
      ;


alias date_time-library
    : $(BOOST_BASE)/libs/date_time/build
    : <include>$(BOOST_BASE) <toolset>msvc:<link>static
    ;

alias asio-library
     : $(BOOST_BASE)/libs/system/build//boost_system	
     $(BOOST_BASE)/libs/regex/build//boost_regex
      $(BOOST_BASE)/libs/date_time/build
     : <include>$(BOOST_BASE) <toolset>msvc:<link>static
     ;


alias filesystem-library     
      : $(BOOST_BASE)/libs/filesystem/build//boost_filesystem
      : <include>$(BOOST_BASE) <toolset>msvc:<link>static
      ;

alias regex-library     
      : $(BOOST_BASE)/libs/regex/build//boost_regex
      : <include>$(BOOST_BASE) <toolset>msvc:<link>static
      ;


install threaded-library-lib : threaded-library : <location>$(TOP)/lib <install-type>LIB ;
install serialization-lib : serialization-library : <location>$(TOP)/lib  <install-type>LIB ;
install asio-library-lib :  asio-library :  <location>$(TOP)/lib <install-type>LIB ;
install date_time-library-lib : date_time-library  :  <location>$(TOP)/lib <install-type>LIB ;

install regex-lib : regex-library : <location>$(TOP)/lib <install-type>LIB ;

install filesystem-lib : filesystem-library : <location>$(TOP)/lib <install-type>LIB ;
	

#Name the directory structure
use-project /lib/stringify : general/stringify/build ;
use-project /lib/hardware-coms-manager : coms_manager/build ;
use-project /lib/hardware-lecroyCM : lecroy/build ;
use-project /lib/hardware-agilentWG : agilent_pulse_generators/build ;
use-project /lib/hardware-pulse-recv : pulse_recv/build ;

use-project  /lib/filename : filename/build ;
use-project  /lib/readme : readme/build ;



#build libraries;
build-project ./general/stringify/build ;
build-project ./coms_manager/build ;
build-project ./agilent_pulse_generators/build ;
build-project ./lecroy/build     ;
build-project ./pulse_recv/build ;
build-project ./filename/build   ;
build-project ./readme/build   ;
build-project ./hardware-header/build  ;

#test libraries

#swig libraries

#build-project ./coms_manager/build/swig ;
#build-project ./agilent_pulse_generators/build/swig ;
#build-project ./lecroy/build/swig ;
#build-project ./pulse_recv/build/swig ;


#build app

build-project ./experiments/build ;


#docs
build-project ./coms_manager/build/docs ;
build-project ./lecroy/build/docs ;
build-project ./pulse_recv/build/docs ;
build-project ./agilent_pulse_generators/build/docs ;
build-project ./hardware-header/build/docs ;

build-project ./filename/build/docs ;
build-project ./readme/build/docs ;
build-project ./general/stringify/build/docs ;


