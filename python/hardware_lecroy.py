# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hardware_lecroy', [dirname(__file__)])
        except ImportError:
            import _hardware_lecroy
            return _hardware_lecroy
        if fp is not None:
            try:
                _mod = imp.load_module('_hardware_lecroy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hardware_lecroy = swig_import_helper()
    del swig_import_helper
else:
    import _hardware_lecroy
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hardware_lecroy.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _hardware_lecroy.SwigPyIterator_value(self)
    def incr(self, n = 1): return _hardware_lecroy.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _hardware_lecroy.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _hardware_lecroy.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _hardware_lecroy.SwigPyIterator_equal(self, *args)
    def copy(self): return _hardware_lecroy.SwigPyIterator_copy(self)
    def next(self): return _hardware_lecroy.SwigPyIterator_next(self)
    def __next__(self): return _hardware_lecroy.SwigPyIterator___next__(self)
    def previous(self): return _hardware_lecroy.SwigPyIterator_previous(self)
    def advance(self, *args): return _hardware_lecroy.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _hardware_lecroy.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _hardware_lecroy.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _hardware_lecroy.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _hardware_lecroy.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _hardware_lecroy.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _hardware_lecroy.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _hardware_lecroy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hardware_lecroy.new_floatArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hardware_lecroy.delete_floatArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _hardware_lecroy.floatArray___getitem__(self, *args)
    def __setitem__(self, *args): return _hardware_lecroy.floatArray___setitem__(self, *args)
    def cast(self): return _hardware_lecroy.floatArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _hardware_lecroy.floatArray_frompointer
    if _newclass:frompointer = staticmethod(_hardware_lecroy.floatArray_frompointer)
floatArray_swigregister = _hardware_lecroy.floatArray_swigregister
floatArray_swigregister(floatArray)

def floatArray_frompointer(*args):
  return _hardware_lecroy.floatArray_frompointer(*args)
floatArray_frompointer = _hardware_lecroy.floatArray_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hardware_lecroy.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hardware_lecroy.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _hardware_lecroy.doubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _hardware_lecroy.doubleArray___setitem__(self, *args)
    def cast(self): return _hardware_lecroy.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _hardware_lecroy.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_hardware_lecroy.doubleArray_frompointer)
doubleArray_swigregister = _hardware_lecroy.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(*args):
  return _hardware_lecroy.doubleArray_frompointer(*args)
doubleArray_frompointer = _hardware_lecroy.doubleArray_frompointer

class lecroy_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lecroy_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lecroy_header, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _hardware_lecroy.new_lecroy_header()
        try: self.this.append(this)
        except: self.this = this
    def __rshift__(self, *args): return _hardware_lecroy.lecroy_header___rshift__(self, *args)
    def decode_string(self, *args): return _hardware_lecroy.lecroy_header_decode_string(self, *args)
    __swig_destroy__ = _hardware_lecroy.delete_lecroy_header
    __del__ = lambda self : None;
lecroy_header_swigregister = _hardware_lecroy.lecroy_header_swigregister
lecroy_header_swigregister(lecroy_header)

class lecroy_file(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lecroy_file, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lecroy_file, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hardware_lecroy.new_lecroy_file(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_data1(self, *args): return _hardware_lecroy.lecroy_file_set_data1(self, *args)
    def set_data2(self, *args): return _hardware_lecroy.lecroy_file_set_data2(self, *args)
    def get_data1(self, *args): return _hardware_lecroy.lecroy_file_get_data1(self, *args)
    def get_data2(self): return _hardware_lecroy.lecroy_file_get_data2(self)
    def __call__(self, *args): return _hardware_lecroy.lecroy_file___call__(self, *args)
    def setitem(self, *args): return _hardware_lecroy.lecroy_file_setitem(self, *args)
    def getitem(self, *args): return _hardware_lecroy.lecroy_file_getitem(self, *args)
    def size1(self): return _hardware_lecroy.lecroy_file_size1(self)
    def size2(self): return _hardware_lecroy.lecroy_file_size2(self)
    def __getitem__(self, *args): return _hardware_lecroy.lecroy_file___getitem__(self, *args)
    def __setitem__(self, *args): return _hardware_lecroy.lecroy_file___setitem__(self, *args)
    __swig_destroy__ = _hardware_lecroy.delete_lecroy_file
    __del__ = lambda self : None;
lecroy_file_swigregister = _hardware_lecroy.lecroy_file_swigregister
lecroy_file_swigregister(lecroy_file)

class option_not_recognised(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, option_not_recognised, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, option_not_recognised, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _hardware_lecroy.new_option_not_recognised()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hardware_lecroy.delete_option_not_recognised
    __del__ = lambda self : None;
option_not_recognised_swigregister = _hardware_lecroy.option_not_recognised_swigregister
option_not_recognised_swigregister(option_not_recognised)

class failed_to_reset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, failed_to_reset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, failed_to_reset, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _hardware_lecroy.new_failed_to_reset()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hardware_lecroy.delete_failed_to_reset
    __del__ = lambda self : None;
failed_to_reset_swigregister = _hardware_lecroy.failed_to_reset_swigregister
failed_to_reset_swigregister(failed_to_reset)

class channel_value_not_valid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, channel_value_not_valid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, channel_value_not_valid, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _hardware_lecroy.new_channel_value_not_valid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hardware_lecroy.delete_channel_value_not_valid
    __del__ = lambda self : None;
channel_value_not_valid_swigregister = _hardware_lecroy.channel_value_not_valid_swigregister
channel_value_not_valid_swigregister(channel_value_not_valid)

class store_mode_not_valid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, store_mode_not_valid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, store_mode_not_valid, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _hardware_lecroy.new_store_mode_not_valid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hardware_lecroy.delete_store_mode_not_valid
    __del__ = lambda self : None;
store_mode_not_valid_swigregister = _hardware_lecroy.store_mode_not_valid_swigregister
store_mode_not_valid_swigregister(store_mode_not_valid)

class store_format_not_valid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, store_format_not_valid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, store_format_not_valid, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _hardware_lecroy.new_store_format_not_valid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hardware_lecroy.delete_store_format_not_valid
    __del__ = lambda self : None;
store_format_not_valid_swigregister = _hardware_lecroy.store_format_not_valid_swigregister
store_format_not_valid_swigregister(store_format_not_valid)

class coupling_option_not_recognised(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coupling_option_not_recognised, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coupling_option_not_recognised, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _hardware_lecroy.new_coupling_option_not_recognised()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hardware_lecroy.delete_coupling_option_not_recognised
    __del__ = lambda self : None;
coupling_option_not_recognised_swigregister = _hardware_lecroy.coupling_option_not_recognised_swigregister
coupling_option_not_recognised_swigregister(coupling_option_not_recognised)

class trigger_mode_not_recognised(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, trigger_mode_not_recognised, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, trigger_mode_not_recognised, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _hardware_lecroy.new_trigger_mode_not_recognised()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hardware_lecroy.delete_trigger_mode_not_recognised
    __del__ = lambda self : None;
trigger_mode_not_recognised_swigregister = _hardware_lecroy.trigger_mode_not_recognised_swigregister
trigger_mode_not_recognised_swigregister(trigger_mode_not_recognised)

class trigger_state_not_recognised(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, trigger_state_not_recognised, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, trigger_state_not_recognised, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _hardware_lecroy.new_trigger_state_not_recognised()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hardware_lecroy.delete_trigger_state_not_recognised
    __del__ = lambda self : None;
trigger_state_not_recognised_swigregister = _hardware_lecroy.trigger_state_not_recognised_swigregister
trigger_state_not_recognised_swigregister(trigger_state_not_recognised)

class trigger_type_not_recognised(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, trigger_type_not_recognised, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, trigger_type_not_recognised, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _hardware_lecroy.new_trigger_type_not_recognised()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hardware_lecroy.delete_trigger_type_not_recognised
    __del__ = lambda self : None;
trigger_type_not_recognised_swigregister = _hardware_lecroy.trigger_type_not_recognised_swigregister
trigger_type_not_recognised_swigregister(trigger_type_not_recognised)

class trigger_hold_type_not_recognised(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, trigger_hold_type_not_recognised, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, trigger_hold_type_not_recognised, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _hardware_lecroy.new_trigger_hold_type_not_recognised()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hardware_lecroy.delete_trigger_hold_type_not_recognised
    __del__ = lambda self : None;
trigger_hold_type_not_recognised_swigregister = _hardware_lecroy.trigger_hold_type_not_recognised_swigregister
trigger_hold_type_not_recognised_swigregister(trigger_hold_type_not_recognised)

class calibration_failed_exception(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, calibration_failed_exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, calibration_failed_exception, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _hardware_lecroy.new_calibration_failed_exception()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hardware_lecroy.delete_calibration_failed_exception
    __del__ = lambda self : None;
calibration_failed_exception_swigregister = _hardware_lecroy.calibration_failed_exception_swigregister
calibration_failed_exception_swigregister(calibration_failed_exception)

class invalid_memory_option(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, invalid_memory_option, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, invalid_memory_option, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _hardware_lecroy.new_invalid_memory_option()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hardware_lecroy.delete_invalid_memory_option
    __del__ = lambda self : None;
invalid_memory_option_swigregister = _hardware_lecroy.invalid_memory_option_swigregister
invalid_memory_option_swigregister(invalid_memory_option)

class waveform_description_too_long(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, waveform_description_too_long, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, waveform_description_too_long, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _hardware_lecroy.new_waveform_description_too_long()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hardware_lecroy.delete_waveform_description_too_long
    __del__ = lambda self : None;
waveform_description_too_long_swigregister = _hardware_lecroy.waveform_description_too_long_swigregister
waveform_description_too_long_swigregister(waveform_description_too_long)

class lecroy_com_manager_ip(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lecroy_com_manager_ip, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lecroy_com_manager_ip, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hardware_lecroy.new_lecroy_com_manager_ip(*args)
        try: self.this.append(this)
        except: self.this = this
    def send(self, *args): return _hardware_lecroy.lecroy_com_manager_ip_send(self, *args)
    def recv(self, *args): return _hardware_lecroy.lecroy_com_manager_ip_recv(self, *args)
    def timed_recv(self, *args): return _hardware_lecroy.lecroy_com_manager_ip_timed_recv(self, *args)
    def clear(self): return _hardware_lecroy.lecroy_com_manager_ip_clear(self)
    __swig_destroy__ = _hardware_lecroy.delete_lecroy_com_manager_ip
    __del__ = lambda self : None;
lecroy_com_manager_ip_swigregister = _hardware_lecroy.lecroy_com_manager_ip_swigregister
lecroy_com_manager_ip_swigregister(lecroy_com_manager_ip)

class lecroy_com_manager_serial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lecroy_com_manager_serial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lecroy_com_manager_serial, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hardware_lecroy.new_lecroy_com_manager_serial(*args)
        try: self.this.append(this)
        except: self.this = this
    def send(self, *args): return _hardware_lecroy.lecroy_com_manager_serial_send(self, *args)
    def recv(self, *args): return _hardware_lecroy.lecroy_com_manager_serial_recv(self, *args)
    def timed_recv(self, *args): return _hardware_lecroy.lecroy_com_manager_serial_timed_recv(self, *args)
    def clear(self): return _hardware_lecroy.lecroy_com_manager_serial_clear(self)
    __swig_destroy__ = _hardware_lecroy.delete_lecroy_com_manager_serial
    __del__ = lambda self : None;
lecroy_com_manager_serial_swigregister = _hardware_lecroy.lecroy_com_manager_serial_swigregister
lecroy_com_manager_serial_swigregister(lecroy_com_manager_serial)

C1 = _hardware_lecroy.C1
C2 = _hardware_lecroy.C2
C3 = _hardware_lecroy.C3
C4 = _hardware_lecroy.C4
F1 = _hardware_lecroy.F1
F2 = _hardware_lecroy.F2
F3 = _hardware_lecroy.F3
F4 = _hardware_lecroy.F4
F5 = _hardware_lecroy.F5
F6 = _hardware_lecroy.F6
F7 = _hardware_lecroy.F7
F8 = _hardware_lecroy.F8
M1 = _hardware_lecroy.M1
M2 = _hardware_lecroy.M2
M3 = _hardware_lecroy.M3
M4 = _hardware_lecroy.M4
ALL_DISPLAYED = _hardware_lecroy.ALL_DISPLAYED
EX = _hardware_lecroy.EX
EX10 = _hardware_lecroy.EX10
ETM10 = _hardware_lecroy.ETM10
FILE = _hardware_lecroy.FILE
HDD = _hardware_lecroy.HDD
NO_AUTOSAVE = _hardware_lecroy.NO_AUTOSAVE
FILL = _hardware_lecroy.FILL
WRAP = _hardware_lecroy.WRAP
ASCII = _hardware_lecroy.ASCII
BINARY = _hardware_lecroy.BINARY
EXCEL = _hardware_lecroy.EXCEL
MATHCAD = _hardware_lecroy.MATHCAD
MATLAB = _hardware_lecroy.MATLAB
DC = _hardware_lecroy.DC
AC = _hardware_lecroy.AC
A1M = _hardware_lecroy.A1M
D1M = _hardware_lecroy.D1M
D50 = _hardware_lecroy.D50
GND = _hardware_lecroy.GND
AUTO = _hardware_lecroy.AUTO
NORM = _hardware_lecroy.NORM
SINGLE = _hardware_lecroy.SINGLE
STOP = _hardware_lecroy.STOP
DROPOUT = _hardware_lecroy.DROPOUT
EDGE = _hardware_lecroy.EDGE
GLITCH = _hardware_lecroy.GLITCH
INTERVAL = _hardware_lecroy.INTERVAL
STD = _hardware_lecroy.STD
SINGLE_SOURCE = _hardware_lecroy.SINGLE_SOURCE
STATE_QUALIFIED = _hardware_lecroy.STATE_QUALIFIED
EDGE_QUALIFIED = _hardware_lecroy.EDGE_QUALIFIED
TIME_GREATER_THAN = _hardware_lecroy.TIME_GREATER_THAN
TIME_WIDTH = _hardware_lecroy.TIME_WIDTH
EVENTS = _hardware_lecroy.EVENTS
PULSE_SMALLER_THAN = _hardware_lecroy.PULSE_SMALLER_THAN
PULSE_GREATER_THAN = _hardware_lecroy.PULSE_GREATER_THAN
INTERVAL_SMALLER_THAN = _hardware_lecroy.INTERVAL_SMALLER_THAN
INTEVAL_GREATER_THAN = _hardware_lecroy.INTEVAL_GREATER_THAN
PULSE_WIDTH = _hardware_lecroy.PULSE_WIDTH
INTERVAL_WIDTH = _hardware_lecroy.INTERVAL_WIDTH
NO_HOLD = _hardware_lecroy.NO_HOLD
class lecroy_com_ip(lecroy_com_manager_ip):
    __swig_setmethods__ = {}
    for _s in [lecroy_com_manager_ip]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, lecroy_com_ip, name, value)
    __swig_getmethods__ = {}
    for _s in [lecroy_com_manager_ip]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, lecroy_com_ip, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hardware_lecroy.new_lecroy_com_ip(*args)
        try: self.this.append(this)
        except: self.this = this
    def send(self, *args): return _hardware_lecroy.lecroy_com_ip_send(self, *args)
    def recv(self, *args): return _hardware_lecroy.lecroy_com_ip_recv(self, *args)
    def set_coupling(self, *args): return _hardware_lecroy.lecroy_com_ip_set_coupling(self, *args)
    def set_timebase(self, *args): return _hardware_lecroy.lecroy_com_ip_set_timebase(self, *args)
    def arm(self): return _hardware_lecroy.lecroy_com_ip_arm(self)
    def auto_calibrate(self, *args): return _hardware_lecroy.lecroy_com_ip_auto_calibrate(self, *args)
    def calibrate(self): return _hardware_lecroy.lecroy_com_ip_calibrate(self)
    def beep(self): return _hardware_lecroy.lecroy_com_ip_beep(self)
    def clear_memory(self, *args): return _hardware_lecroy.lecroy_com_ip_clear_memory(self, *args)
    def set_date(self): return _hardware_lecroy.lecroy_com_ip_set_date(self)
    def aquire_single(self): return _hardware_lecroy.lecroy_com_ip_aquire_single(self)
    def message(self, *args): return _hardware_lecroy.lecroy_com_ip_message(self, *args)
    def set_vertical_offset(self, *args): return _hardware_lecroy.lecroy_com_ip_set_vertical_offset(self, *args)
    def vertical_offset_constant(self, *args): return _hardware_lecroy.lecroy_com_ip_vertical_offset_constant(self, *args)
    def persistence(self, *args): return _hardware_lecroy.lecroy_com_ip_persistence(self, *args)
    def reset(self): return _hardware_lecroy.lecroy_com_ip_reset(self)
    def sequence(self, *args): return _hardware_lecroy.lecroy_com_ip_sequence(self, *args)
    def stop(self): return _hardware_lecroy.lecroy_com_ip_stop(self)
    def store(self, *args): return _hardware_lecroy.lecroy_com_ip_store(self, *args)
    def store_setup(self, *args): return _hardware_lecroy.lecroy_com_ip_store_setup(self, *args)
    def toggle_trace(self, *args): return _hardware_lecroy.lecroy_com_ip_toggle_trace(self, *args)
    def trace_on(self, *args): return _hardware_lecroy.lecroy_com_ip_trace_on(self, *args)
    def trace_off(self, *args): return _hardware_lecroy.lecroy_com_ip_trace_off(self, *args)
    def trigger_coupling(self, *args): return _hardware_lecroy.lecroy_com_ip_trigger_coupling(self, *args)
    def trigger_delay(self, *args): return _hardware_lecroy.lecroy_com_ip_trigger_delay(self, *args)
    def trigger_level(self, *args): return _hardware_lecroy.lecroy_com_ip_trigger_level(self, *args)
    def trigger_mode(self, *args): return _hardware_lecroy.lecroy_com_ip_trigger_mode(self, *args)
    def trigger_pattern(self, *args): return _hardware_lecroy.lecroy_com_ip_trigger_pattern(self, *args)
    def trigger_select(self, *args): return _hardware_lecroy.lecroy_com_ip_trigger_select(self, *args)
    def trigger_positive_edge(self, *args): return _hardware_lecroy.lecroy_com_ip_trigger_positive_edge(self, *args)
    def trigger_negative_edge(self, *args): return _hardware_lecroy.lecroy_com_ip_trigger_negative_edge(self, *args)
    def volts_per_div(self, *args): return _hardware_lecroy.lecroy_com_ip_volts_per_div(self, *args)
    def wait(self): return _hardware_lecroy.lecroy_com_ip_wait(self)
    def get_waveform(self, *args): return _hardware_lecroy.lecroy_com_ip_get_waveform(self, *args)
    def get_waveform_text(self, *args): return _hardware_lecroy.lecroy_com_ip_get_waveform_text(self, *args)
    def waveform_text(self, *args): return _hardware_lecroy.lecroy_com_ip_waveform_text(self, *args)
    def display(self, *args): return _hardware_lecroy.lecroy_com_ip_display(self, *args)
    __swig_destroy__ = _hardware_lecroy.delete_lecroy_com_ip
    __del__ = lambda self : None;
lecroy_com_ip_swigregister = _hardware_lecroy.lecroy_com_ip_swigregister
lecroy_com_ip_swigregister(lecroy_com_ip)

class lecroy_com_serial(lecroy_com_manager_serial):
    __swig_setmethods__ = {}
    for _s in [lecroy_com_manager_serial]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, lecroy_com_serial, name, value)
    __swig_getmethods__ = {}
    for _s in [lecroy_com_manager_serial]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, lecroy_com_serial, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hardware_lecroy.new_lecroy_com_serial(*args)
        try: self.this.append(this)
        except: self.this = this
    def send(self, *args): return _hardware_lecroy.lecroy_com_serial_send(self, *args)
    def recv(self, *args): return _hardware_lecroy.lecroy_com_serial_recv(self, *args)
    def set_coupling(self, *args): return _hardware_lecroy.lecroy_com_serial_set_coupling(self, *args)
    def set_timebase(self, *args): return _hardware_lecroy.lecroy_com_serial_set_timebase(self, *args)
    def arm(self): return _hardware_lecroy.lecroy_com_serial_arm(self)
    def auto_calibrate(self, *args): return _hardware_lecroy.lecroy_com_serial_auto_calibrate(self, *args)
    def calibrate(self): return _hardware_lecroy.lecroy_com_serial_calibrate(self)
    def beep(self): return _hardware_lecroy.lecroy_com_serial_beep(self)
    def clear_memory(self, *args): return _hardware_lecroy.lecroy_com_serial_clear_memory(self, *args)
    def set_date(self): return _hardware_lecroy.lecroy_com_serial_set_date(self)
    def aquire_single(self): return _hardware_lecroy.lecroy_com_serial_aquire_single(self)
    def message(self, *args): return _hardware_lecroy.lecroy_com_serial_message(self, *args)
    def set_vertical_offset(self, *args): return _hardware_lecroy.lecroy_com_serial_set_vertical_offset(self, *args)
    def vertical_offset_constant(self, *args): return _hardware_lecroy.lecroy_com_serial_vertical_offset_constant(self, *args)
    def persistence(self, *args): return _hardware_lecroy.lecroy_com_serial_persistence(self, *args)
    def reset(self): return _hardware_lecroy.lecroy_com_serial_reset(self)
    def sequence(self, *args): return _hardware_lecroy.lecroy_com_serial_sequence(self, *args)
    def stop(self): return _hardware_lecroy.lecroy_com_serial_stop(self)
    def store(self, *args): return _hardware_lecroy.lecroy_com_serial_store(self, *args)
    def store_setup(self, *args): return _hardware_lecroy.lecroy_com_serial_store_setup(self, *args)
    def toggle_trace(self, *args): return _hardware_lecroy.lecroy_com_serial_toggle_trace(self, *args)
    def trace_on(self, *args): return _hardware_lecroy.lecroy_com_serial_trace_on(self, *args)
    def trace_off(self, *args): return _hardware_lecroy.lecroy_com_serial_trace_off(self, *args)
    def trigger_coupling(self, *args): return _hardware_lecroy.lecroy_com_serial_trigger_coupling(self, *args)
    def trigger_delay(self, *args): return _hardware_lecroy.lecroy_com_serial_trigger_delay(self, *args)
    def trigger_level(self, *args): return _hardware_lecroy.lecroy_com_serial_trigger_level(self, *args)
    def trigger_mode(self, *args): return _hardware_lecroy.lecroy_com_serial_trigger_mode(self, *args)
    def trigger_pattern(self, *args): return _hardware_lecroy.lecroy_com_serial_trigger_pattern(self, *args)
    def trigger_select(self, *args): return _hardware_lecroy.lecroy_com_serial_trigger_select(self, *args)
    def trigger_positive_edge(self, *args): return _hardware_lecroy.lecroy_com_serial_trigger_positive_edge(self, *args)
    def trigger_negative_edge(self, *args): return _hardware_lecroy.lecroy_com_serial_trigger_negative_edge(self, *args)
    def volts_per_div(self, *args): return _hardware_lecroy.lecroy_com_serial_volts_per_div(self, *args)
    def wait(self): return _hardware_lecroy.lecroy_com_serial_wait(self)
    def get_waveform(self, *args): return _hardware_lecroy.lecroy_com_serial_get_waveform(self, *args)
    def get_waveform_text(self, *args): return _hardware_lecroy.lecroy_com_serial_get_waveform_text(self, *args)
    def waveform_text(self, *args): return _hardware_lecroy.lecroy_com_serial_waveform_text(self, *args)
    def display(self, *args): return _hardware_lecroy.lecroy_com_serial_display(self, *args)
    __swig_destroy__ = _hardware_lecroy.delete_lecroy_com_serial
    __del__ = lambda self : None;
lecroy_com_serial_swigregister = _hardware_lecroy.lecroy_com_serial_swigregister
lecroy_com_serial_swigregister(lecroy_com_serial)

class lecroy_64Xi(lecroy_com_ip):
    __swig_setmethods__ = {}
    for _s in [lecroy_com_ip]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, lecroy_64Xi, name, value)
    __swig_getmethods__ = {}
    for _s in [lecroy_com_ip]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, lecroy_64Xi, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hardware_lecroy.new_lecroy_64Xi(*args)
        try: self.this.append(this)
        except: self.this = this
    def send(self, *args): return _hardware_lecroy.lecroy_64Xi_send(self, *args)
    def recv(self, *args): return _hardware_lecroy.lecroy_64Xi_recv(self, *args)
    def set_coupling(self, *args): return _hardware_lecroy.lecroy_64Xi_set_coupling(self, *args)
    def set_timebase(self, *args): return _hardware_lecroy.lecroy_64Xi_set_timebase(self, *args)
    def arm(self): return _hardware_lecroy.lecroy_64Xi_arm(self)
    def auto_calibrate(self, *args): return _hardware_lecroy.lecroy_64Xi_auto_calibrate(self, *args)
    def calibrate(self): return _hardware_lecroy.lecroy_64Xi_calibrate(self)
    def beep(self): return _hardware_lecroy.lecroy_64Xi_beep(self)
    def clear_memory(self, *args): return _hardware_lecroy.lecroy_64Xi_clear_memory(self, *args)
    def clear(self): return _hardware_lecroy.lecroy_64Xi_clear(self)
    def set_date(self): return _hardware_lecroy.lecroy_64Xi_set_date(self)
    def aquire_single(self): return _hardware_lecroy.lecroy_64Xi_aquire_single(self)
    def message(self, *args): return _hardware_lecroy.lecroy_64Xi_message(self, *args)
    def set_vertical_offset(self, *args): return _hardware_lecroy.lecroy_64Xi_set_vertical_offset(self, *args)
    def vertical_offset_constant(self, *args): return _hardware_lecroy.lecroy_64Xi_vertical_offset_constant(self, *args)
    def persistence(self, *args): return _hardware_lecroy.lecroy_64Xi_persistence(self, *args)
    def reset(self): return _hardware_lecroy.lecroy_64Xi_reset(self)
    def sequence(self, *args): return _hardware_lecroy.lecroy_64Xi_sequence(self, *args)
    def stop(self): return _hardware_lecroy.lecroy_64Xi_stop(self)
    def store(self, *args): return _hardware_lecroy.lecroy_64Xi_store(self, *args)
    def store_setup(self, *args): return _hardware_lecroy.lecroy_64Xi_store_setup(self, *args)
    def toggle_trace(self, *args): return _hardware_lecroy.lecroy_64Xi_toggle_trace(self, *args)
    def trace_on(self, *args): return _hardware_lecroy.lecroy_64Xi_trace_on(self, *args)
    def trace_off(self, *args): return _hardware_lecroy.lecroy_64Xi_trace_off(self, *args)
    def trigger_coupling(self, *args): return _hardware_lecroy.lecroy_64Xi_trigger_coupling(self, *args)
    def trigger_delay(self, *args): return _hardware_lecroy.lecroy_64Xi_trigger_delay(self, *args)
    def trigger_level(self, *args): return _hardware_lecroy.lecroy_64Xi_trigger_level(self, *args)
    def trigger_mode(self, *args): return _hardware_lecroy.lecroy_64Xi_trigger_mode(self, *args)
    def trigger_pattern(self, *args): return _hardware_lecroy.lecroy_64Xi_trigger_pattern(self, *args)
    def trigger_negative_edge(self, *args): return _hardware_lecroy.lecroy_64Xi_trigger_negative_edge(self, *args)
    def volts_per_div(self, *args): return _hardware_lecroy.lecroy_64Xi_volts_per_div(self, *args)
    def wait(self): return _hardware_lecroy.lecroy_64Xi_wait(self)
    def get_waveform(self, *args): return _hardware_lecroy.lecroy_64Xi_get_waveform(self, *args)
    def get_waveform_text(self, *args): return _hardware_lecroy.lecroy_64Xi_get_waveform_text(self, *args)
    def waveform_text(self, *args): return _hardware_lecroy.lecroy_64Xi_waveform_text(self, *args)
    def display(self, *args): return _hardware_lecroy.lecroy_64Xi_display(self, *args)
    __swig_destroy__ = _hardware_lecroy.delete_lecroy_64Xi
    __del__ = lambda self : None;
lecroy_64Xi_swigregister = _hardware_lecroy.lecroy_64Xi_swigregister
lecroy_64Xi_swigregister(lecroy_64Xi)



