# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hardware_agilent', [dirname(__file__)])
        except ImportError:
            import _hardware_agilent
            return _hardware_agilent
        if fp is not None:
            try:
                _mod = imp.load_module('_hardware_agilent', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hardware_agilent = swig_import_helper()
    del swig_import_helper
else:
    import _hardware_agilent
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hardware_agilent.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _hardware_agilent.SwigPyIterator_value(self)
    def incr(self, n = 1): return _hardware_agilent.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _hardware_agilent.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _hardware_agilent.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _hardware_agilent.SwigPyIterator_equal(self, *args)
    def copy(self): return _hardware_agilent.SwigPyIterator_copy(self)
    def next(self): return _hardware_agilent.SwigPyIterator_next(self)
    def __next__(self): return _hardware_agilent.SwigPyIterator___next__(self)
    def previous(self): return _hardware_agilent.SwigPyIterator_previous(self)
    def advance(self, *args): return _hardware_agilent.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _hardware_agilent.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _hardware_agilent.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _hardware_agilent.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _hardware_agilent.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _hardware_agilent.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _hardware_agilent.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _hardware_agilent.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hardware_agilent.new_floatArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hardware_agilent.delete_floatArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _hardware_agilent.floatArray___getitem__(self, *args)
    def __setitem__(self, *args): return _hardware_agilent.floatArray___setitem__(self, *args)
    def cast(self): return _hardware_agilent.floatArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _hardware_agilent.floatArray_frompointer
    if _newclass:frompointer = staticmethod(_hardware_agilent.floatArray_frompointer)
floatArray_swigregister = _hardware_agilent.floatArray_swigregister
floatArray_swigregister(floatArray)

def floatArray_frompointer(*args):
  return _hardware_agilent.floatArray_frompointer(*args)
floatArray_frompointer = _hardware_agilent.floatArray_frompointer

SIN = _hardware_agilent.SIN
SQUARE = _hardware_agilent.SQUARE
PULSE = _hardware_agilent.PULSE
TRIANGLE = _hardware_agilent.TRIANGLE
RAMP = _hardware_agilent.RAMP
NOISE = _hardware_agilent.NOISE
DC = _hardware_agilent.DC
USER = _hardware_agilent.USER
OHM50 = _hardware_agilent.OHM50
INFTY = _hardware_agilent.INFTY
IMMEDIATE = _hardware_agilent.IMMEDIATE
EXTERNAL = _hardware_agilent.EXTERNAL
BUS = _hardware_agilent.BUS
class option_not_recognised(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, option_not_recognised, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, option_not_recognised, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _hardware_agilent.new_option_not_recognised()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hardware_agilent.delete_option_not_recognised
    __del__ = lambda self : None;
option_not_recognised_swigregister = _hardware_agilent.option_not_recognised_swigregister
option_not_recognised_swigregister(option_not_recognised)

class failed_to_reset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, failed_to_reset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, failed_to_reset, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _hardware_agilent.new_failed_to_reset()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hardware_agilent.delete_failed_to_reset
    __del__ = lambda self : None;
failed_to_reset_swigregister = _hardware_agilent.failed_to_reset_swigregister
failed_to_reset_swigregister(failed_to_reset)

class agilent_com_ip(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, agilent_com_ip, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, agilent_com_ip, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hardware_agilent.new_agilent_com_ip(*args)
        try: self.this.append(this)
        except: self.this = this
    def send(self, *args): return _hardware_agilent.agilent_com_ip_send(self, *args)
    def recv(self, *args): return _hardware_agilent.agilent_com_ip_recv(self, *args)
    def reset(self): return _hardware_agilent.agilent_com_ip_reset(self)
    def apply(self, *args): return _hardware_agilent.agilent_com_ip_apply(self, *args)
    def shape(self, *args): return _hardware_agilent.agilent_com_ip_shape(self, *args)
    def load(self, *args): return _hardware_agilent.agilent_com_ip_load(self, *args)
    def duty_cycle(self, *args): return _hardware_agilent.agilent_com_ip_duty_cycle(self, *args)
    def frequency(self, *args): return _hardware_agilent.agilent_com_ip_frequency(self, *args)
    def voltage(self, *args): return _hardware_agilent.agilent_com_ip_voltage(self, *args)
    def offset(self, *args): return _hardware_agilent.agilent_com_ip_offset(self, *args)
    def cycles(self, *args): return _hardware_agilent.agilent_com_ip_cycles(self, *args)
    def burst_on(self): return _hardware_agilent.agilent_com_ip_burst_on(self)
    def burst_off(self): return _hardware_agilent.agilent_com_ip_burst_off(self)
    def phase(self, *args): return _hardware_agilent.agilent_com_ip_phase(self, *args)
    def burst_int(self, *args): return _hardware_agilent.agilent_com_ip_burst_int(self, *args)
    def burst_ext(self): return _hardware_agilent.agilent_com_ip_burst_ext(self)
    def trigger(self, *args): return _hardware_agilent.agilent_com_ip_trigger(self, *args)
    def trigger_now(self): return _hardware_agilent.agilent_com_ip_trigger_now(self)
    def error(self): return _hardware_agilent.agilent_com_ip_error(self)
    def arb_wave(self, *args): return _hardware_agilent.agilent_com_ip_arb_wave(self, *args)
    __swig_destroy__ = _hardware_agilent.delete_agilent_com_ip
    __del__ = lambda self : None;
agilent_com_ip_swigregister = _hardware_agilent.agilent_com_ip_swigregister
agilent_com_ip_swigregister(agilent_com_ip)

class agilent_com_serial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, agilent_com_serial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, agilent_com_serial, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hardware_agilent.new_agilent_com_serial(*args)
        try: self.this.append(this)
        except: self.this = this
    def send(self, *args): return _hardware_agilent.agilent_com_serial_send(self, *args)
    def recv(self, *args): return _hardware_agilent.agilent_com_serial_recv(self, *args)
    def reset(self): return _hardware_agilent.agilent_com_serial_reset(self)
    def apply(self, *args): return _hardware_agilent.agilent_com_serial_apply(self, *args)
    def shape(self, *args): return _hardware_agilent.agilent_com_serial_shape(self, *args)
    def load(self, *args): return _hardware_agilent.agilent_com_serial_load(self, *args)
    def duty_cycle(self, *args): return _hardware_agilent.agilent_com_serial_duty_cycle(self, *args)
    def frequency(self, *args): return _hardware_agilent.agilent_com_serial_frequency(self, *args)
    def voltage(self, *args): return _hardware_agilent.agilent_com_serial_voltage(self, *args)
    def offset(self, *args): return _hardware_agilent.agilent_com_serial_offset(self, *args)
    def cycles(self, *args): return _hardware_agilent.agilent_com_serial_cycles(self, *args)
    def burst_on(self): return _hardware_agilent.agilent_com_serial_burst_on(self)
    def burst_off(self): return _hardware_agilent.agilent_com_serial_burst_off(self)
    def phase(self, *args): return _hardware_agilent.agilent_com_serial_phase(self, *args)
    def burst_int(self, *args): return _hardware_agilent.agilent_com_serial_burst_int(self, *args)
    def burst_ext(self): return _hardware_agilent.agilent_com_serial_burst_ext(self)
    def trigger(self, *args): return _hardware_agilent.agilent_com_serial_trigger(self, *args)
    def trigger_now(self): return _hardware_agilent.agilent_com_serial_trigger_now(self)
    def error(self): return _hardware_agilent.agilent_com_serial_error(self)
    def arb_wave(self, *args): return _hardware_agilent.agilent_com_serial_arb_wave(self, *args)
    __swig_destroy__ = _hardware_agilent.delete_agilent_com_serial
    __del__ = lambda self : None;
agilent_com_serial_swigregister = _hardware_agilent.agilent_com_serial_swigregister
agilent_com_serial_swigregister(agilent_com_serial)

class WG33220A_ip(agilent_com_ip):
    __swig_setmethods__ = {}
    for _s in [agilent_com_ip]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WG33220A_ip, name, value)
    __swig_getmethods__ = {}
    for _s in [agilent_com_ip]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WG33220A_ip, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hardware_agilent.new_WG33220A_ip(*args)
        try: self.this.append(this)
        except: self.this = this
    def send(self, *args): return _hardware_agilent.WG33220A_ip_send(self, *args)
    def recv(self, *args): return _hardware_agilent.WG33220A_ip_recv(self, *args)
    def apply(self, *args): return _hardware_agilent.WG33220A_ip_apply(self, *args)
    def load(self, *args): return _hardware_agilent.WG33220A_ip_load(self, *args)
    def frequency(self, *args): return _hardware_agilent.WG33220A_ip_frequency(self, *args)
    def voltage(self, *args): return _hardware_agilent.WG33220A_ip_voltage(self, *args)
    def offset(self, *args): return _hardware_agilent.WG33220A_ip_offset(self, *args)
    def cycles(self, *args): return _hardware_agilent.WG33220A_ip_cycles(self, *args)
    def burst_on(self): return _hardware_agilent.WG33220A_ip_burst_on(self)
    def burst_off(self): return _hardware_agilent.WG33220A_ip_burst_off(self)
    def phase(self, *args): return _hardware_agilent.WG33220A_ip_phase(self, *args)
    def burst_int(self, *args): return _hardware_agilent.WG33220A_ip_burst_int(self, *args)
    def burst_ext(self): return _hardware_agilent.WG33220A_ip_burst_ext(self)
    def trigger(self, *args): return _hardware_agilent.WG33220A_ip_trigger(self, *args)
    def trigger_now(self): return _hardware_agilent.WG33220A_ip_trigger_now(self)
    def shape(self, *args): return _hardware_agilent.WG33220A_ip_shape(self, *args)
    def arb_wave(self, *args): return _hardware_agilent.WG33220A_ip_arb_wave(self, *args)
    def reset(self): return _hardware_agilent.WG33220A_ip_reset(self)
    def error(self): return _hardware_agilent.WG33220A_ip_error(self)
    __swig_destroy__ = _hardware_agilent.delete_WG33220A_ip
    __del__ = lambda self : None;
WG33220A_ip_swigregister = _hardware_agilent.WG33220A_ip_swigregister
WG33220A_ip_swigregister(WG33220A_ip)

class WG33220A_serial(agilent_com_serial):
    __swig_setmethods__ = {}
    for _s in [agilent_com_serial]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WG33220A_serial, name, value)
    __swig_getmethods__ = {}
    for _s in [agilent_com_serial]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WG33220A_serial, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hardware_agilent.new_WG33220A_serial(*args)
        try: self.this.append(this)
        except: self.this = this
    def send(self, *args): return _hardware_agilent.WG33220A_serial_send(self, *args)
    def recv(self, *args): return _hardware_agilent.WG33220A_serial_recv(self, *args)
    def apply(self, *args): return _hardware_agilent.WG33220A_serial_apply(self, *args)
    def load(self, *args): return _hardware_agilent.WG33220A_serial_load(self, *args)
    def frequency(self, *args): return _hardware_agilent.WG33220A_serial_frequency(self, *args)
    def voltage(self, *args): return _hardware_agilent.WG33220A_serial_voltage(self, *args)
    def offset(self, *args): return _hardware_agilent.WG33220A_serial_offset(self, *args)
    def cycles(self, *args): return _hardware_agilent.WG33220A_serial_cycles(self, *args)
    def burst_on(self): return _hardware_agilent.WG33220A_serial_burst_on(self)
    def burst_off(self): return _hardware_agilent.WG33220A_serial_burst_off(self)
    def phase(self, *args): return _hardware_agilent.WG33220A_serial_phase(self, *args)
    def burst_int(self, *args): return _hardware_agilent.WG33220A_serial_burst_int(self, *args)
    def burst_ext(self): return _hardware_agilent.WG33220A_serial_burst_ext(self)
    def trigger(self, *args): return _hardware_agilent.WG33220A_serial_trigger(self, *args)
    def trigger_now(self): return _hardware_agilent.WG33220A_serial_trigger_now(self)
    def shape(self, *args): return _hardware_agilent.WG33220A_serial_shape(self, *args)
    def arb_wave(self, *args): return _hardware_agilent.WG33220A_serial_arb_wave(self, *args)
    def reset(self): return _hardware_agilent.WG33220A_serial_reset(self)
    def error(self): return _hardware_agilent.WG33220A_serial_error(self)
    __swig_destroy__ = _hardware_agilent.delete_WG33220A_serial
    __del__ = lambda self : None;
WG33220A_serial_swigregister = _hardware_agilent.WG33220A_serial_swigregister
WG33220A_serial_swigregister(WG33220A_serial)


def apply_waveform_ip(*args):
  return _hardware_agilent.apply_waveform_ip(*args)
apply_waveform_ip = _hardware_agilent.apply_waveform_ip

def apply_waveform_serial(*args):
  return _hardware_agilent.apply_waveform_serial(*args)
apply_waveform_serial = _hardware_agilent.apply_waveform_serial


