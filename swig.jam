
import type ;
import generators ;

type.register SWIG : i ;
generators.register-standard  swig.swig-converter : SWIG : CPP ;



rule swig-converter ( targets * : sources * : properties * )
{
    if <main-target-type>PYTHON_WRAPPER in $(properties) {
        OPTIONS on $(targets) = -python -outdir python ;
	EXTRACOMMAND1 on $(targets) = "#" ;
	EXTRACOMMAND2 on $(targets) = "#" ;
    } else if  <main-target-type>OCTAVE_WRAPPER in $(properties) {
        OPTIONS on $(targets) = -octave -outdir octave  ;
    	EXTRACOMMAND1 on $(targets) = " cp " ;
    	EXTRACOMMAND2 on $(targets) = " mkoctfile " ;
    } else if <main-target-type>CSHARP_WRAPPER in $(properties) {
         OPTIONS on $(targets) = -csharp -outdir csharp ;
    } else if <main-target-type>JAVA_WRAPPER in $(properties) {
         OPTIONS on $(targets) = -java -outdir java ;
    } else {
            EXIT "*** Error *** swig.swig-converter: Unknown main-target-type" ;
    }

}

import toolset : flags ;
flags swig.swig-converter EXTRACOMMAND1  ;

flags swig.swig-converter EXTRACOMMAND2  ;

flags swig.swig-converter INCLUDES <include> ;

flags swig.swig-converter SEARCHES <library-path> ;

flags swig.swig-converter  LIBRARIES <library> ; 

#import toolset : flags ;
#flags swig.swig-converter  LIBRARIES2 <library> ; 

#flags swig.swig-converter NAMES <library-file> ;
# Declare flags for linking 
# First, the common flags 
#flags swig.swig-converter  OPTIONS2 <debug-symbols>on : -gstabs+ ; 
#flags swig.swig-converter  OPTIONS2 <profiling>on : -p ; 
#flags swig.swig-converter  OPTIONS2  <library> <linkflags> ; 
#flags swig.swig-converter  LINKPATH <library-path> ; 
#flags swig.swig-converter  FINDLIBS-ST <find-static-library> ; 
#flags swig.swig-converter  FINDLIBS-SA <find-shared-library> ; 


actions swig-converter
{
    swig -c++ $(OPTIONS) -I"$(INCLUDES)" -o $(<) $(>) ;   
    $(EXTRACOMMAND2)  -I"$(INCLUDES)"   -L"$(SEARCHES)"   -l"$(LIBRARIES:B)"   -o octave/$(>:B).oct $(<) ;
} 
#    $(EXTRACOMMAND1)  $(<) octave/$(>:B)_wrap.cpp ;
  #  $(EXTRACOMMAND) $(<)  $(>:B)_code.cpp -o
 # $(EXTRACOMMAND) $(<:B)$(<:S)  $(>:B).cpp 
type.register CSHARP_WRAPPER ;
type.register JAVA_WRAPPER ;
type.register PYTHON_WRAPPER ;
type.register OCTAVE_WRAPPER ;


#type.register OCTAVE_INTERMEDIATE : octave_intermediate ;
#generators.register-standard  octave_intermediate.swig-converter : OCTAVE_INTERMEDIATE : CPP ;

#rule octave_intermediate-converter ( targets * : sources * : properties * )
#{
  
#        OPTIONS on $(targets) = -octave -outdir octave  ;
#}
#actions octave_intermediate-converter
#{
#    mkoctfile $(OPTIONS) -I"$(INCLUDES)" -o $(<) $(>) ;  
#} 
